name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release (contains alpha, beta, rc)
        if [[ $VERSION =~ (alpha|beta|rc) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate version format
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v1.0.0-alpha.1"
          exit 1
        fi

    - name: Check if tag exists
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "Tag $VERSION already exists"
          exit 1
        fi

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        npm run test:unit
        npm run test:integration

    - name: Build application
      run: npm run build

    - name: Create release archive
      run: |
        mkdir -p release-assets
        tar -czf release-assets/zapin-${{ needs.validate-release.outputs.version }}.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=tests \
          --exclude=.github \
          --exclude=docs \
          .

    - name: Generate checksums
      run: |
        cd release-assets
        sha256sum *.tar.gz > checksums.txt

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release-assets/

  build-docker-release:
    name: Build Release Docker Images
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        format: spdx-json
        output-file: sbom-${{ needs.validate-release.outputs.version }}.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-release
        path: sbom-${{ needs.validate-release.outputs.version }}.spdx.json

  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-docker-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}'
        format: 'sarif'
        output: 'trivy-release-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-release-results.sarif'

    - name: Check for critical vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}'
        format: 'json'
        output: 'trivy-release.json'
        exit-code: '1'
        severity: 'CRITICAL'

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        CURRENT_TAG=${{ needs.validate-release.outputs.version }}
        
        echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Save changelog to file and output
        echo "$CHANGELOG" > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: changelog.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, build-docker-release, security-scan-release, generate-changelog]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
        path: release-assets/

    - name: Download SBOM
      uses: actions/download-artifact@v3
      with:
        name: sbom-release
        path: ./

    - name: Download changelog
      uses: actions/download-artifact@v3
      with:
        name: changelog
        path: ./

    - name: Create tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a ${{ needs.validate-release.outputs.version }} -m "Release ${{ needs.validate-release.outputs.version }}"
        git push origin ${{ needs.validate-release.outputs.version }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: changelog.md
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
        files: |
          release-assets/*
          sbom-${{ needs.validate-release.outputs.version }}.spdx.json
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Deploy release to production
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << EOF
          cd /opt/zapin-production
          git fetch --tags
          git checkout ${{ needs.validate-release.outputs.version }}
          ./scripts/deploy.sh --production --version=${{ needs.validate-release.outputs.version }}
        EOF

    - name: Run post-deployment verification
      run: |
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
        
        # Verify version endpoint
        VERSION_RESPONSE=$(curl -s ${{ secrets.PRODUCTION_URL }}/api/version)
        if [[ "$VERSION_RESPONSE" != *"${{ needs.validate-release.outputs.version }}"* ]]; then
          echo "Version verification failed"
          exit 1
        fi

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-release]
    if: always()
    
    steps:
    - name: Notify successful release
      if: needs.create-release.result == 'success' && (needs.deploy-release.result == 'success' || needs.deploy-release.result == 'skipped')
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          🎉 Release ${{ needs.validate-release.outputs.version }} has been successfully created and deployed!
          
          📦 Docker Image: `ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}`
          🔗 Release Notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}

    - name: Notify failed release
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          🚨 Release ${{ needs.validate-release.outputs.version }} failed!
          
          Please check the workflow logs and take appropriate action.

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in documentation
      run: |
        # Update version in package.json if needed
        sed -i 's/"version": ".*"/"version": "${{ needs.validate-release.outputs.version }}"/' package.json
        
        # Update version in README if it exists
        if [ -f README.md ]; then
          sed -i 's/Version: .*/Version: ${{ needs.validate-release.outputs.version }}/' README.md
        fi

    - name: Commit documentation updates
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git diff --quiet; then
          echo "No documentation changes to commit"
        else
          git add .
          git commit -m "docs: update version to ${{ needs.validate-release.outputs.version }}"
          git push origin main
        fi