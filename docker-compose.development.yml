version: '3.8'

services:
  # Main application with hot reload
  zapin-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: zapin-app-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"
      - "9229:9229"  # Node.js debugger
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://zapin:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/zapin_db_dev
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_password}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key-for-development-only}
      - EVOLUTION_API_BASE_URL=${EVOLUTION_API_BASE_URL:-https://core.zapin.tech/v2}
      - EVOLUTION_GLOBAL_API_KEY=${EVOLUTION_GLOBAL_API_KEY:-dev-evolution-key}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-dev-nextauth-secret}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - LOG_LEVEL=debug
      - DEBUG=zapin:*
      - WEBHOOK_BASE_URL=http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
      - ./logs:/app/logs
      - dev_uploads:/app/uploads
    networks:
      - zapin-dev-network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database for development
  postgres:
    image: postgres:15-alpine
    container_name: zapin-postgres-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=zapin_db_dev
      - POSTGRES_USER=zapin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_password}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/db-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - zapin-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zapin -d zapin_db_dev"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache for development
  redis:
    image: redis:7-alpine
    container_name: zapin-redis-dev
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-dev_password}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_dev_data:/data
    ports:
      - "6379:6379"
    networks:
      - zapin-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx for development (optional)
  nginx:
    image: nginx:alpine
    container_name: zapin-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - zapin-app
    networks:
      - zapin-dev-network
    profiles:
      - nginx

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: zapin-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - zapin-dev-network
    profiles:
      - mail

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: zapin-redis-commander-dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-dev_password}
      - HTTP_USER=admin
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - zapin-dev-network
    profiles:
      - tools

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: zapin-pgadmin-dev
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@zapin.dev}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - zapin-dev-network
    profiles:
      - tools

  # Prometheus for development monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: zapin-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - zapin-dev-network
    profiles:
      - monitoring

  # Grafana for development dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: zapin-grafana-dev
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_SECURITY_DISABLE_GRAVATAR=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - zapin-dev-network
    profiles:
      - monitoring

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: zapin-jaeger-dev
    restart: unless-stopped
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # UDP agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - zapin-dev-network
    profiles:
      - tracing

  # MinIO for S3-compatible object storage testing
  minio:
    image: minio/minio:latest
    container_name: zapin-minio-dev
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_dev_data:/data
    command: server /data --console-address ":9001"
    networks:
      - zapin-dev-network
    profiles:
      - storage

  # Test database for running tests
  postgres-test:
    image: postgres:15-alpine
    container_name: zapin-postgres-test
    restart: unless-stopped
    environment:
      - POSTGRES_DB=zapin_db_test
      - POSTGRES_USER=zapin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_password}
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - zapin-dev-network
    profiles:
      - testing

  # Redis for testing
  redis-test:
    image: redis:7-alpine
    container_name: zapin-redis-test
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_password}
    ports:
      - "6380:6379"
    networks:
      - zapin-dev-network
    profiles:
      - testing

  # Evolution API Mock Server for testing
  evolution-mock:
    image: wiremock/wiremock:latest
    container_name: zapin-evolution-mock
    restart: unless-stopped
    ports:
      - "8082:8080"
    volumes:
      - ./tests/mocks/evolution:/home/wiremock
    command: --global-response-templating --verbose
    networks:
      - zapin-dev-network
    profiles:
      - testing

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local
  minio_dev_data:
    driver: local
  postgres_test_data:
    driver: local
  dev_uploads:
    driver: local

networks:
  zapin-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1

# Development-specific configurations
x-logging: &dev-logging
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "5"

# Apply logging to core services
services:
  zapin-app:
    logging: *dev-logging
  postgres:
    logging: *dev-logging
  redis:
    logging: *dev-logging